name: Deploy(Build->Notarize->Upload Release->Update appcast.xml)

on:
  push:
    tags:
      - "*"

jobs:
  build-and-deploy:
    # macOS 버전 지정(latest로 해당 버전이 지정안됨)
    runs-on: macos-15

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set VERSION, APP_NAME, BUNDLE_ID
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "APP_NAME=TodoMate" >> $GITHUB_ENV
          echo "BUNDLE_ID=io.hotcs6.TodoMate" >> $GITHUB_ENV

      - name: Update CFBundleVersion in Info.plist
        run: |
          INFO_PLIST_PATH="./$APP_NAME/Info.plist"
          if [ -f "$INFO_PLIST_PATH" ]; then
            /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string $VERSION" "$INFO_PLIST_PATH" || \
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $VERSION" "$INFO_PLIST_PATH"
            echo "Updated CFBundleVersion to $VERSION in Info.plist"
          else
            echo "Info.plist not found at $INFO_PLIST_PATH"
          fi

      - name: Install Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate and provisioning profile
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/

      # Xcode 버전 설정
      - name: Set Up Xcode 16.2
        run: sudo xcode-select -s /Applications/Xcode_16.2.app

      - name: Build macOS App(Build Configuration-Release, macOS, manual code signing)
        run: |
          # -allowProvisioningUpdates archive!!!
          xcodebuild -project $APP_NAME.xcodeproj \
            -scheme $APP_NAME \
            -configuration Release \
            -sdk macosx \
            -destination 'platform=macOS' \
            -archivePath build/$APP_NAME.xcarchive archive \
            DEVELOPMENT_TEAM=8PRWAG4355 \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Developer ID Application" \
            archive

          xcodebuild -exportArchive \
            -archivePath build/$APP_NAME.xcarchive \
            -exportPath build/ \
            -exportOptionsPlist exportOptions.plist

      - name: Find and Zip Built App
        id: find_app
        run: |
          echo "Searching for built app..."
          APP_PATH=$(find build -name "*.app" | head -n 1)
          echo "Found app at: $APP_PATH"

          ZIP_PATH="build/${APP_PATH##*/}.zip"
          echo "Creating zip at: $ZIP_PATH"

          ditto -c -k --sequesterRsrc --keepParent "$APP_PATH" "$ZIP_PATH"
          echo "APP_ZIP=$ZIP_PATH" >> $GITHUB_ENV

          echo "Zip file created. Size: $(ls -lh "$ZIP_PATH" | awk '{print $5}')"

      - name: Notarize App using App-Specific Password
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APP_PASSWORD: ${{ secrets.APP_PASSWORD }}
        run: |
          xcrun altool --notarize-app -f "$APP_ZIP" \
          --primary-bundle-id "$BUNDLE_ID" \
          -u "$APPLE_ID" -p "$APP_PASSWORD"

      - name: Upload Release Asset to GitHub
        id: upload-release
        uses: softprops/action-gh-release@v1
        with:
          files: ${APP_ZIP}

      - name: Set up Python and install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install PyNaCl

      - name: Generate appcast.xml
        working-directory: ${APP_NAME}/script
        run: |
          echo "Generating appcast.xml..."
          echo "Working directory: $(pwd)"
          echo "Input parameters:"
          echo "Version: $VERSION"
          echo "App path: $APP_ZIP"
          echo "Upload URL: ${{ steps.upload-release.outputs.upload_url }}"

          python3 appcast_generator.py --version "$VERSION" \
            --path "$APP_ZIP" \
            --url "${{ steps.upload-release.outputs.upload_url }}" \
            --edSignature "${{ secrets.ED25519 }}"

          echo "appcast.xml generated successfully:"
          cat appcast.xml

      - name: Deploy appcast.xml to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: .
          target-folder: appcast # appcast.xml만 업로드
          clean: false
